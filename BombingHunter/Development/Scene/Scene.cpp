#include "Scene.h"
#include"../Objects/Player/Player.h"
#include"../Utility/InputControl.h"
#include"../Objects/Enemy/Enemy.h"
#include"../Objects/Bullet/Bullet.h"
#include"DxLib.h"

#define D_PIVOT_CENTER
//コンストラクタ
Scene::Scene() :objects()
{
}

//デストラクタ
Scene::~Scene()
{
	//忘れ防止
	Finalize();
}

//初期化処理
void Scene::Initialize()
{
	background_image = LoadGraph("Resouce/Images/BackGround.png");
	//プレイヤーを生成する
	CreateObject<Player>(Vector2D(320.0f, 240.0f));
}

//描画処理
void Scene::Draw() const
{
	DrawGraph(0, 0, background_image, TRUE);
	//シーンに存在するオブジェクトの描画処理
	for (GameObject* obj : objects)
	{
		obj->Draw();
	}
}

//更新処理
void Scene::Update()
{

	Draw();
	//シーンに存在するオブジェクトの更新処理
	for (GameObject* obj : objects)
	{
		obj->Update();
	}

	//オブジェクト同士の当たり判定チェック
	for (int i = 0; i < objects.size(); i++)
	{
		for (int j = i + 1; j < objects.size(); j++)
		{
			//当たり判定チェック処理
			HitCheckObject(objects[i], objects[j]);
		}
	}
	//球が敵に当たったら、敵と球をkesu
	
	//Zキーを推したら、敵を生成する
	if (InputControl::GetKeyDown(KEY_INPUT_Z))
	{
		CreateObject<Enemy>(Vector2D(100.0f, 480.0f));
	}
	//Xキーを押したら、球を生成する
	if (InputControl::GetKeyDown(KEY_INPUT_X))
	{
		for (int i = 0; i < objects.size(); i++) 
		{
			if(!(dynamic_cast<Player*>(objects[i]) == nullptr))
			{
				CreateObject<Bullet>(objects[i]->GetLocation());
			}
		}
	}
}

#ifdef D_PIVOT_CENTER

//当たり判定チェック処理
void Scene::HitCheckObject(GameObject* a, GameObject* b)
{
	//２つのオブジェクトの当たり判定の大きさを取得
	Vector2D diff = a->GetLocation() - b->GetLocation();

	//２つのオブジェクトの当たり判定の大きさを取得
	Vector2D box_size = (a->GetBoxSize() + b->GetBoxSize()) / 2.0f;

	//距離より大きさが大きい場合、hit判定とする
	if ((fabsf(diff.x) < box_size.x) && (fabsf(diff.y) < box_size.y))
	{
		//当たったことをオブジェクトに通知する
		a->OnHitCollision(b);
		b->OnHitCollision(a);
	}
}
#else
当たり判定チェック処理（左上頂点の座標から当たり判定計算を行う）
void Scene::HitCheckObject(GameObject* a, GameObject* b)
{
	//右上頂点座標を取得する
	Vector2D a_lower_right = a->GetLocation() + a->GetBoxSize();
	Vector2D b_lower_riget = b->GetLocation() + b->GetBoxSize();

	//単系Aと単系Bの位置情報を調べる
	if ((a->GetLocation().x < b_lower_right.x) &&
		(a->GetLocation().x < b_lower_right.y) &&
		(b_lower_right.x > b->GetLocation().x) &&
		(b_lower_right.y > b->GetLocation().x))
	{
		//オブジェクトに対してHit判定を通知する
		a->OnHitCollision(b);
		b->OnHitCollision(a);
	}
}
#endif // D_PIVOT_CENTER


//終了時処理
void Scene::Finalize()
{
	//動的配列が空なら処理を終了する
	if (objects.empty())
	{
		return;
	}

	//各オブジェクトを削除する
	for (GameObject* obj : objects)
	{
		obj->Finalize();
		delete obj;
	}

	//動的配列の解放
	objects.clear();
}


